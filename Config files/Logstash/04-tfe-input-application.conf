input {
 udp {
  port => 5961
  codec => plain { charset => "UTF-8" }
  type => "ApplicationEvent"
 }
}

filter {
 if [type] == "ApplicationEvent" {
  grok {
   break_on_match => false
   match => { 
    message => "(?m)%{TIMESTAMP_ISO8601:sourceTimestamp} a: %{GREEDYDATA:hostPrivateIP_b64} b: %{GREEDYDATA:userDomain_b64} c: %{GREEDYDATA:agentId_b64} d: %{GREEDYDATA:eventType_b64} - e: %{GREEDYDATA:processId_b64} f: %{GREEDYDATA:processPath_b64} g: %{GREEDYDATA:processWindowTitle_b64}"
   }
  }
  ruby {
   code => "
	require 'base64'
        require 'openssl'
  
	def Decrypt(encrypted_data, key, iv, cipher_type)
         encrypted_data.gsub!('-','+')
	 encrypted_data.gsub!('_','/')
	 encrypted_data = Base64.decode64(encrypted_data)
         encrypted_data = encrypted_data.ljust((encrypted_data.size / 16.0).ceil * 16, '\0')
	 aes = OpenSSL::Cipher::Cipher.new(cipher_type)
    	 aes.decrypt
         aes.key = key
         aes.iv = iv
         return aes.update(encrypted_data) + aes.final
	end
        
	keyAndiv = 'Wom8yRG2XONW61ID'
	cipherType = 'aes-128-cbc'

	event.set('hostPrivateIP', Decrypt(event.get('hostPrivateIP_b64'), keyAndiv, keyAndiv, cipherType))
	event.set('userDomain', Decrypt(event.get('userDomain_b64'), keyAndiv, keyAndiv, cipherType))	
	event.set('agentId', Decrypt(event.get('agentId_b64'), keyAndiv, keyAndiv, cipherType))
	event.set('eventType', Decrypt(event.get('eventType_b64'), keyAndiv, keyAndiv, cipherType))
   	event.set('processId', Decrypt(event.get('processId_b64'), keyAndiv , keyAndiv, cipherType))
	event.set('processPath', Decrypt(event.get('processPath_b64'), keyAndiv, keyAndiv, cipherType))
	event.set('processWindowTitle', Decrypt(event.get('processWindowTitle_b64'), keyAndiv, keyAndiv, cipherType))
        "
  }
  mutate {
   remove_field => [ "hostPrivateIP_b64" ]
   remove_field => [ "userDomain_b64" ]
   remove_field => [ "agentId_b64" ]
   remove_field => [ "eventType_b64" ]
   remove_field => [ "processId_b64" ]
   remove_field => [ "processPath_b64" ]
   remove_field => [ "processWindowTitle_b64" ]
  }
 }
}

output {
 if [type] == "ApplicationEvent" {
  elasticsearch {
   index => "logstash-sap-application-%{+YYYY.MM.dd}"
   hosts => "localhost"
  }
 }
}

